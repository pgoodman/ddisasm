//===- code_inference_postprocess.dl ------------------------*- datalog -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//

/*
  After symbolization, we split blocks if there are symbols pointing to
  the middle of the block and then merge blocks that start at addresses
  that are never referenced and must fallthrough from another block.
  Compute padding regions.

*/

.decl code_in_refined_block(ea:address,block:address)
.output code_in_refined_block

.decl refined_block(block:address)
.output refined_block

.decl block_information(block:address,size:number,endAddress:address)
.output block_information

.decl refined_block_last_instruction(block:address,EA:address)

////////////////////////////////////////////////////////
// First we split blocks if there is a symbol pointing to the middle

.decl block_needs_splitting_at(EA:address)
.decl code_in_split_block(ea:address,block:address)
.decl split_block(block:address)

block_needs_splitting_at(EA):-
    // only these sym exprs should be able to point to the middle of a block.
    // other kinds of symbols we considered as potential block limits during
    // code inference.
    (
        symbol_minus_symbol(_,_,_,EA,_);
        symbol_minus_symbol(_,_,EA,_,_)
    ),
    code_in_block(EA,Block),
    EA != Block.


split_block(Block):-
    block(Block).
split_block(EA):-
    block_needs_splitting_at(EA).

code_in_split_block(Block,Block):-
    split_block(Block).

code_in_split_block(EA,Block):-
    code_in_split_block(PrevEA,Block),
    code_in_block(PrevEA,PrevBlock),
    next(PrevEA,EA),
    code_in_block(EA,PrevBlock),
    !block_needs_splitting_at(EA).

////////////////////////////////////////////////////////
// Once we have split blocks, we merge the ones that can be merged.

// a block that is not referenced anywhere
.decl block_needs_merging(block:address)

block_needs_merging(Block):-
    split_block(Block),
    must_fallthrough(Code,Block),
    code(Code),
    //not referenced anywhere
    !symbolic_operand(_,_,Block,_),
    !code_pointer_in_data(_,Block),
    !symbol_minus_symbol(_,_,_,Block,_),
    !symbol_minus_symbol(_,_,Block,_,_),
    !moved_data_label(_,_,_,Block),
    !moved_label(_,_,_,Block),
    !function_symbol(Block,_),
    !defined_symbol(Block,_,_,_,_,_),
    !entry_point(Block),
    !instruction_has_loop_prefix(Block),
    !fde_addresses(Block,_),
    !fde_addresses(_,Block).

refined_block(Block):-
    split_block(Block),
    !block_needs_merging(Block).

code_in_refined_block(EA,Block):-
    refined_block(Block),
    code_in_split_block(EA,Block).

code_in_refined_block(EA,Block):-
    block_needs_merging(OldBlock),
    code_in_split_block(EA,OldBlock),
    must_fallthrough(Prev,OldBlock),
    code_in_refined_block(Prev,Block).

////////////////////////////////////////////////////////
// Finally, we compute additional information about the new blocks.

refined_block_last_instruction(Block,EA):-
    code_in_refined_block(EA,Block),
    next(EA,Next),
    !code_in_refined_block(Next,Block).

block_information(Block,BlockSize,LastEA+InsnSize):-
    refined_block_last_instruction(Block,LastEA),
    instruction(LastEA, InsnSize, _, _,_, _, _, _),
    BlockSize= LastEA+InsnSize - Block.

.decl next_refined_block_in_section(Block:address, NextBlock:address)

next_refined_block_in_section(Block,NextBlock):-
    refined_block(Block),
    next_block_in_section(Block,NextBlock),
    refined_block(NextBlock).

next_refined_block_in_section(PrevBlock,Block):-
    refined_block(Block),
    next_block_in_section(PrevMerged,Block),
    block_needs_merging(PrevMerged),
    code_in_refined_block(PrevMerged,PrevBlock).

////////////////////////////////////////////////////////
// Compute padding regions

.decl padding(EA:address,Size:number)
.output padding

// blocks with only nops are padding
padding(EA,Size):-
    nop_block(EA),
    block_information(EA,Size,_).

// padding that does not form a block
padding(EA,Size):-
    after_end(NonNop,End),
    //this condition guarantees that we take the last after_end of a sequence of nops
    !arch.is_nop(NonNop),
    next(End,EA),
    Size = NonNop-EA,
    Size > 0.

.decl block_has_non_nop(Block:address)

block_has_non_nop(Block):-
    code_in_refined_block(EA,Block),
    !arch.is_nop(EA).

.decl nop_block(Block:address)

nop_block(Block):-
    refined_block(Block),
    !block_has_non_nop(Block).
