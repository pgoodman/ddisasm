//===- pointer_reatribution.dl ----------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
Compilers sometimes generate expressions of the form
symbol+constant. It can happen that such expression falls in the 1) middle
of a pointer, 2) outside the data sections or 3) falls into a data section
that is different from the one of symbol.  We want to detect those
cases and generate the adequate symbol+constant.

We generate two predicates:

-moved_data_label
 for pointers in data sections
-moved_label
 for pointers in code sections

We only 'move' pointers in data sections if their destination falls in
the middle of another pointer (case 1).  In code sections we consider
the tree possibilities.

In addition, we distinguish two types: I) the
pointer appears as an immediate operand or O) as an offset in an indirect
operand. We also consider a special case of indirect operand when we have
a pc-relative operand.

For indirect operands, we know they are being used to access memory. This makes
them more likely to be symbolic. They cannot be a float for example.
But they could still be a constant.

For immediate operands, they are likely to be symbolic if they are used to
compute an address but this is also no enough.

*/

.decl moved_data_label(EA:address,Size:number,Dest:address,New_dest:address)
.output moved_data_label

.decl moved_label(EA:address,Index:number,Val:address,New_val:address)
.output moved_label

// this predicate is just for debugging purposes
.decl moved_label_class(EA:address,Index:number,Reason:symbol)
.output moved_label_class

////////////////////////////////////////////////////////////////////////////////////

moved_data_label(EA,Size,Dest,New_dest):-
    symbolic_data(EA,Size,Dest),
    address_in_data_refined_range.overlap(Dest,8,New_dest),
    symbolic_data(New_dest,8,_).

//if something points to the middle of a known symbol we express it as symbol+constant
//as long as it is not code
moved_data_label(EA,SizePointer,Dest,Address):-
    symbolic_data(EA,SizePointer,Dest),
    !code(Dest),
    symbol(Address,Size,_,_,_,Name),
    !function_symbol(Address,Name),
    Address < Dest,
    Dest < Address+Size.

// create a symbol+constant for overlapping instructions
moved_data_label(EA,SizePointer,Dest,Address):-
    symbolic_data(EA,SizePointer,Dest),
    overlapping_instruction(Dest,Address).

////////////////////////////////////////////////////////////////////////////////////

.decl moved_pc_relative_candidate(EA:address,Index:number,Val:address,New_val:address,Diff:number)

moved_pc_relative_candidate(EA_def2,Op_index,Dest,New_dest,Diff):-
    binary_format("ELF"),
    cmp_reg_to_reg(EA,Reg1,Reg2),
    def_used(EA_def1,Reg1,EA,_),
    dest_enlarged_data_section(EA_def1,Reg1,New_dest,Beg,End,OldBeg,OldEnd),

    def_used(EA_def2,Reg2,EA,_),
    pc_relative_operand(EA_def2,Op_index,Dest),
    instruction_get_operation(EA_def2,"LEA"),

    Beg <= Dest, Dest <= End,
    (OldBeg > Dest ; Dest > OldEnd),
    Diff = max(New_dest-Dest,Dest-New_dest).

// a RIP relative reference is always symbolic. If we have no better
// candidates we just find the closest data section
moved_pc_relative_candidate(EA,Op_index,Dest,New_dest,Diff):-
    code(EA),
    binary_format("ELF"),
    pc_relative_operand(EA,Op_index,Dest),
    !symbolic_operand(EA,Op_index,_,_),
    regular_data_section(Name),
    section(Name,SizeSect,Base),
    (
        Base > Dest,
        New_dest = Base
        ;
        Dest > Base+SizeSect,
        New_dest = Base+SizeSect
    ),
    Diff = max(New_dest-Dest,Dest-New_dest).

//References to exception sections should match a cie or fde entry
moved_pc_relative_candidate(EA,Op_index,Dest,New_dest,Diff):-
    code(EA),
    pc_relative_operand(EA,Op_index,Dest),
    !symbolic_operand(EA,Op_index,_,_),
    exception_section(Name),
    section(Name,SizeSect,Base),
    (
        cie_entry(Dest, _,_,_);
        fde_entry(Dest,_,_,_,_,_)
    ),
    New_dest = Base,
    Diff = max(New_dest-Dest,Dest-New_dest).
////////////////////////////////////////////////////////////////////////////////
// indirect operand (type O)

//pc-relative that misses the data sections
moved_label_class(EA,Op_index,"pc-relative miss data-sections"),
moved_label(EA,Op_index,Dest,New_dest):-
    moved_pc_relative_candidate(EA,Op_index,Dest,New_dest,Diff),
    Diff_min = min X:moved_pc_relative_candidate(EA,Op_index,Dest,_,X),
    Diff <= Diff_min.

moved_label_class(EA,Op_index,"collides with pointer"),
moved_label(EA,Op_index,Dest,New_dest):-
    binary_type("EXEC"),
    symbolic_operand(EA,Op_index,Dest,"data"),
    //it collides with a pointer
    arch.pointer_size(Pt_size),
    address_in_data_refined_range.overlap(Dest,Pt_size,New_dest),
    symbolic_data(New_dest,_,_).

// the pointer is likely to point to the wrong section
moved_label_class(EA,Op_index,"indirect wrong section"),
moved_displacement_candidate(EA,Op_index,Dest,New_dest,Diff):-
    binary_type("EXEC"),
    symbolic_operand(EA,Op_index,Dest,_),
    data_access(EA,Op_index,_,_,_,_,_,_),
    data_access_pattern_candidate(Access_dest,_,Mult,EA),
    Access_dest != Dest,
    New_dest = Access_dest,
    Diff = max(Access_dest-Dest, Dest-Access_dest),

    section(Name,SectSize,Base),
    Dest >= Base, Dest <= Base+SectSize,

    regular_data_section(Name2), Name2 != Name,
    section(Name2,SectSize2,Base2),
    New_dest >= Base2, New_dest <= Base2+SectSize2,

    // sections can have one overlapping address
    Dest != Base2,
    // There seems to be an asymmetry here
    // Requiring the movement to be consistent with the sign of the
    // multiplier works very well for positive multipliers, not so much
    // for negative ones.
    (
        Mult > 0, New_dest > Dest
        ;
        Mult <= 0
    ).

.decl moved_displacement_candidate(EA:address,Op_index:number,Dest:address,New_dest:address,Priority:number)
.output moved_displacement_candidate

moved_label_class(EA,Op_index,"miss section with access"),
moved_displacement_candidate(EA,Op_index,Dest,Access_dest,1):-
    binary_type("EXEC"),
    data_access(EA,Op_index,_,_,_,_,Dest,_), Dest >= 0,
    !symbolic_operand(EA,Op_index,_,_),
    !pc_relative_operand(EA,Op_index,_),
    data_access_pattern_candidate(Access_dest,_,_,EA),
    regular_data_section(Name),
    section(Name,SizeSect,Base),
    Access_dest >= Base,
    Access_dest < Base+SizeSect,

    Diff = max(Access_dest-Dest,Dest-Access_dest),
    10*Dest >= Base,
    // the remaining component does not fall on any data or code section
    !data_byte(Diff,_),
    // does not fall in bss sections
    bss_section_limits(BssBeg,BssEnd),(Diff < BssBeg; Diff > BssEnd).

// We have an access with a register that is multiplied by something
// If the register does not contain the base address, then the displacement should contain it.
moved_label_class(EA,Op_index,"constant + multiplied reg"),
moved_displacement_candidate(EA,Op_index,Dest,New_dest,Distance):-
    binary_type("EXEC"),
    data_access(EA,Op_index,"NONE","NONE",RegMult,Mult,Dest,_),
    !instruction_get_operation(EA,"LEA"),
    !symbolic_operand(EA,Op_index,_,_),
    !pc_relative_operand(EA,Op_index,_),
    (
        Mult>1;
        value_reg_at_operand(EA,Op_index,RegMult,_,Mult2,0,_), Mult2>1
    ),
    regular_data_section(Name),
    section(Name,SectSize,Base),
    (
        Dest < Base, Distance = Base-Dest, New_dest = Base,
        10*Dest > Base
        ;
        Dest > Base+SectSize, Distance = Dest-(Base+SectSize), New_dest = Base+SectSize
    ).

//Same case as before with the other register
moved_label_class(EA,Op_index,"constant + multiplied reg2"),
moved_displacement_candidate(EA,Op_index,Dest,New_dest,Distance):-
    binary_type("EXEC"),
    data_access(EA,Op_index,"NONE",Reg,"NONE",_,Dest,_),
    !instruction_get_operation(EA,"LEA"),
    !symbolic_operand(EA,Op_index,_,_),
    !pc_relative_operand(EA,Op_index,_),
    value_reg_at_operand(EA,Op_index,Reg,_,Mult2,0,_), Mult2>1,
    regular_data_section(Name),
    section(Name,SectSize,Base),
    (
        Dest < Base, Distance = Base-Dest, New_dest = Base,
        10*Dest > Base
        ;
        Dest>Base+SectSize, Distance = Dest-(Base+SectSize), New_dest = Base+SectSize
    ).

// Same case as before but with a repeated register
moved_label_class(EA,Op_index,"constant + repeated reg"),
moved_displacement_candidate(EA,Op_index,Dest,New_dest,Distance):-
    binary_type("EXEC"),
    data_access(EA,Op_index,"NONE",Reg,Reg,_,Dest,_),
    !instruction_get_operation(EA,"LEA"),
    !symbolic_operand(EA,Op_index,_,_),
    regular_data_section(Name),
    section(Name,SectSize,Base),
    // the destination is below or above the section
    (
        Dest < Base, Distance = Base-Dest, New_dest = Base,
        10*Dest > Base
    ;
        Dest > Base+SectSize, Distance = Dest-(Base+SectSize), New_dest = Base+SectSize
    ).

// references with offset in PIE or REL code
moved_displacement_candidate(EA,Op_index,Dest,SymbolAddr,0):-
    !binary_type("EXEC"),
    data_access(EA,Op_index,_,_,_,_,Dest,_),
    instruction_displacement_offset(EA,Op_index,DisplacementOffset),
    relocation(EA+DisplacementOffset,_,Symbol,_),
    symbol(SymbolAddr,_,_,_,_,Symbol),
    SymbolAddr != Dest.

// we take the candidate with the shortest distance/priority
.decl discarded_moved_displacement_candidate(EA:address,Op_index:number,Dest:address,New_dest:address,Distance:number)

discarded_moved_displacement_candidate(EA,Op_index,Dest,New_dest,Distance1):-
    moved_displacement_candidate(EA,Op_index,Dest,New_dest,Distance1),
    moved_displacement_candidate(EA,Op_index,_,_,Distance2),
    Distance2 < Distance1.

moved_label(EA,Op_index,Dest,New_dest):-
    moved_displacement_candidate(EA,Op_index,Dest,New_dest,Distance),
    !discarded_moved_displacement_candidate(EA,Op_index,Dest,New_dest,Distance).
////////////////////////////////////////////////////////////////////////////////
//immediate operand (type I)
// consider the case where the immediate is a loop bound


.decl mov_immediate_to_reg(EA:address,Reg:register,Imm_index:number,Immediate:number)
.decl cmp_reg_to_reg(EA:address,Reg1:register,Reg2:register)

.decl moved_immediate_candidate(EA:address,Op_index:number,Immediate:number,New_immmediate:number)

mov_immediate_to_reg(EA,Reg,Imm_index,Immediate):-
    code(EA),
    arch.mov(EA),
    instruction_get_src_op(EA,Imm_index,Op),
    op_immediate(Op,Immediate),
    instruction_get_dest_op(EA,_,Op2),
    op_regdirect_contains_reg(Op2,Reg).

cmp_reg_to_reg(EA,Reg1,Reg2):-
    code(EA),
    instruction_get_operation(EA,Operation),
    arch.cmp_operation(Operation),
    instruction_get_op(EA,_,Op1),
    op_regdirect_contains_reg(Op1,Reg1),
    instruction_get_op(EA,_,Op2), Op2!=Op1,
    op_regdirect_contains_reg(Op2,Reg2).

.decl dest_enlarged_data_section(EA:address,Reg:register,New_dest:address,
            Beg:address,End:address,OldBeg:address,OldEnd:address)
.output dest_enlarged_data_section

dest_enlarged_data_section(EA_def,Reg,New_dest,Beg-MultAbs,Beg+SizeSect+MultAbs,Beg,Beg+SizeSect):-
    best_value_reg(EA_def,Reg,_,Mult,New_dest,"loop"),
    MultAbs = max(Mult,-Mult),
    regular_data_section(Name),
    section(Name,SizeSect,Beg),
    New_dest >= Beg,
    New_dest <= Beg+SizeSect.


// immediate used to access memory
moved_label_class(EA_from,Imm_index,"immediate used to access memory"),
moved_immediate_candidate(EA_from,Imm_index,Immediate,New_dest):-
    binary_type("EXEC"),
    data_access(EA_access,Op_index,_,Reg2,Reg3,_,_,Size),
    data_access_pattern_candidate(New_dest,_,Mult,EA_access),

    regular_data_section(Name),
    section(Name,SizeSect,Beg),
    New_dest >= Beg,
    New_dest < Beg+SizeSect,

    (Reg = Reg2; Reg = Reg3),
    value_reg_at_operand(EA_access,Op_index,Reg,EA_from,_,_,Type),
    Type != "incomplete",
    mov_immediate_to_reg(EA_from,Reg,Imm_index,Immediate),
    Beg-Mult <= Immediate,
    Immediate <= Beg+SizeSect+Mult,
    //only move if the original does not fall in the original section
    (Immediate < Beg ; Immediate > Beg+SizeSect).

moved_label_class(EA,Imm_index,"immediate loop bound"),
moved_immediate_candidate(EA,Imm_index,Immediate,New_dest):-
    binary_type("EXEC"),
    cmp_immediate_to_reg(EA,Reg,Imm_index,Immediate),
    def_used(EA_def,Reg,EA,_),
    dest_enlarged_data_section(EA_def,Reg,New_dest,Beg,End,OldBeg,OldEnd),
    Beg <= Immediate, Immediate <= End,
    (OldBeg > Immediate ; Immediate >= OldEnd).

moved_label_class(EA_def2,Imm_index,"loaded immediate loop bound"),
moved_immediate_candidate(EA_def2,Imm_index,Immediate,New_dest):-
    binary_type("EXEC"),
    cmp_reg_to_reg(EA,Reg1,Reg2),
    def_used(EA_def1,Reg1,EA,_),
    dest_enlarged_data_section(EA_def1,Reg1,New_dest,Beg,End,OldBeg,OldEnd),

    def_used(EA_def2,Reg2,EA,_),
    mov_immediate_to_reg(EA_def2,Reg2,Imm_index,Immediate),

    Beg <= Immediate,Immediate <= End,
    (OldBeg > Immediate ; Immediate >= OldEnd).

moved_label_class(EA,Op_index,"pie relocation"),
moved_immediate_candidate(EA,Op_index,Dest,SymbolAddr):-
    !binary_type("EXEC"),
    code(EA),
    instruction_immediate_offset(EA,Op_index,ImmediateOffset),
    instruction_get_src_op(EA,Op_index,Op),
    op_immediate(Op,Dest),
    relocation(EA+ImmediateOffset,_,Symbol,_),
    symbol(SymbolAddr,_,_,_,_,Symbol),
    SymbolAddr != Dest.

moved_label(EA,Op_index,Dest,New_dest):-
    moved_immediate_candidate(EA,Op_index,Dest,New_dest).

// If the destination is in the middle of a known symbol
moved_label_class(EA,Op_index,"middle of symbol"),
moved_label(EA,Op_index,Dest,Address):-
    symbolic_operand(EA,Op_index,Dest,"data"),
    !moved_displacement_candidate(EA,Op_index,_,_,_),
    !moved_immediate_candidate(EA,Op_index,_,_),
    symbol(Address,Size,_,_,_,Name),
    !function_symbol(Address,Name),
    Address < Dest,
    Dest < Address+Size.

// if the destination is an overlapping instruction
moved_label_class(EA,Op_index,"overlapping instruction"),
moved_label(EA,Op_index,Dest,Block):-
    symbolic_operand(EA,Op_index,Dest,"code"),
    overlapping_instruction(Dest,Block).
