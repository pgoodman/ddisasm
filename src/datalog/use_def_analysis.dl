//===- use_def_analysis.dl --------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
This modules computes def-uses chains for a subset of the registers (defined in track_register).
and only if those chains are related eventually to an access to memory.

-'def' computes definitions of registers at each of the locations.

-'used_for_address' compute the set of live uses backwards at each of the locations.
 However, it only computes uses starting at accesses to memory.

-'def_used' intersects the two previous facts to obtain def-use chains.

The traversal of used_for_address is kept intra-procedural (not following call edges).
*/


// register is defined in this location
.decl def(EA:address,Reg:register)


// the register 'reg' at address 'ea' is later used in a memory address in 'where'
// in the operand 'index'

.decl used(EA:address,Reg:register,Index:operand_index)

//The 'reg' is defined in 'ea_def' and used in 'ea_used' in the operand with index 'index_used'
.decl def_used(ea_def:address,reg:register,ea_used:address,index_used:operand_index)
.output def_used

// a register is implicitly defined by being compared to a constant and then jumping
// this definition only takes place in between the jump and the target that implies equality
.decl flow_def(EA:address,Reg:register,EA_next:address,Value:number)
//////////////////////////////////////////////////////////////////////////////
//local underapproximation of control flow
.decl local_next(ea:address,ea_next:address)

local_next(EA,EA_next):-
    code_in_block(EA,Block),
    may_fallthrough(EA,EA_next),
    code_in_block(EA_next,Block).

.decl inter_procedural_jump(Src:address,Dest:address)

inter_procedural_jump(Src,Dest):-
    unconditional_jump(Src),
    direct_jump(Src,Dest),
    direct_call(OtherSrc,Dest),
    code(OtherSrc).

.decl block_next(ea:address,ea_next:address)


block_next(EA,Block2):-
    block_last_instruction(_,EA),
    may_fallthrough(EA,Block2),
    block(Block2).

block_next(EA,EA_next):-
    block_last_instruction(_,EA),
    direct_jump(EA,EA_next),
    !inter_procedural_jump(EA,EA_next).

block_next(EA,EA_next):-
    block_last_instruction(_,EA),
    jump_table_start(EA,Size,TableReference,TableReference,_),
    //FIXME: Do better propagation of the jump table.
    relative_address(_,Size,TableReference,EA_next).

//////////////////////////////////////////////////////////////////////////////
// Main definitions

def(EA,Reg):-
    code(EA),
    instruction_get_dest_op(EA,_,Op),
    op_regdirect_contains_reg(Op,Reg).

def(EA,Reg):-
    code(EA),
    instruction_get_operation(EA,Operation),
    arch.call_operation(Operation),
    arch.function_non_maintained_reg(Reg).

flow_def(EA_jump,Reg,EA_target,Immediate):-
    code(EA),
    cmp_immediate_to_reg(EA,Reg,_,Immediate),
    next(EA,EA_jump),
    direct_jump(EA_jump,EA_target),
    instruction_get_operation(EA_jump,Operation),
    arch.jump_equal_operation(Operation).

flow_def(EA_jump,Reg,EA_target,Immediate):-
    code(EA),
    cmp_immediate_to_reg(EA,Reg,_,Immediate),
    next(EA,EA_jump),
    direct_jump(EA_jump,_),
    next(EA_jump,EA_target),
    instruction_get_operation(EA_jump,Operation),
    arch.jump_unequal_operation(Operation).

.decl must_def(EA:address,Reg:register)

must_def(EA,Reg):-
    def(EA,Reg),
    !arch.conditional_mov(EA).

.decl defined_in_block(EA:address,Reg:register)

defined_in_block(Block,Reg):-
    def(EA,Reg),
    code_in_block(EA,Block).

used(EA,Reg,Index):-
    code(EA),
    instruction_get_src_op(EA,Index,Op),
    op_regdirect_contains_reg(Op,Reg).

used(EA,Reg,Index):-
    code(EA),
    instruction_get_op(EA,Index,Op),
    op_indirect_contains_reg(Op,Reg).

.decl used_in_block(EA:address,Reg:register)

used_in_block(Block,Reg):-
    used(EA,Reg,_),
    code_in_block(EA,Block).

// the last address where a register whas defined within the block
.decl block_last_def(EA:address,EA_def:address,Reg:register)



block_last_def(EA_next,EA,Reg):-
    def(EA,Reg),
    local_next(EA,EA_next).

block_last_def(EA_next,EA_def,Reg):-
    block_last_def(EA,EA_def,Reg),
    !must_def(EA,Reg),
    local_next(EA,EA_next).

// the last address where a register was defined at the basic block level.
.decl last_def(EA:address,EA_def:address,Reg:register)

last_def(Block,EA,Reg):-
    def(EA,Reg),
    block_next(EA,Block),
    !flow_def(EA,Reg,Block,_).

last_def(Block,EA_def,Reg):-
    block_last_def(Block_end,EA_def,Reg),
    !must_def(Block_end,Reg),
    block_next(Block_end,Block),
    !flow_def(Block_end,Reg,Block,_).

last_def(Block_next,EA_def,Reg):-
    last_def(Block,EA_def,Reg),
    !defined_in_block(Block,Reg),
    block_last_instruction(Block,Block_end),
    block_next(Block_end,Block_next),
    !flow_def(Block_end,Reg,Block,_).

last_def(Block_next,Block_end,Reg):-
    flow_def(Block_end,Reg,Block_next,_).


def_used(EA_def,Reg,EA_used,Index):-
    used(EA_used,Reg,Index),
    block_last_def(EA_used,EA_def,Reg).


def_used(EA_def,Reg,EA_used,Index):-
    used(EA_used,Reg,Index),
    !block_last_def(EA_used,_,Reg),
    code_in_block(EA_used,Block),
    last_def(Block,EA_def,Reg).

.decl def_used_for_address(EA_def:address,Reg:register)

def_used_for_address(EA_def,Reg):-
    used(EA,Reg,Index),
    instruction_get_op(EA,Index,Op),
    op_indirect_contains_reg(Op,Reg),
    def_used(EA_def,Reg,EA,Index).

def_used_for_address(EA_def,Reg):-
    reg_jump(EA_used,Reg),
    def_used(EA_def,Reg,EA_used,_).

def_used_for_address(EA_def,Reg):-
    reg_call(EA_used,Reg),
    def_used(EA_def,Reg,EA_used,_).


def_used_for_address(EA_def,Reg):-
    def_used_for_address(EA_used,_),
    used(EA_used,Reg,_),
    def_used(EA_def,Reg,EA_used,_).
